require("dotenv").config();
const { Client, GatewayIntentBits, Events } = require("discord.js");

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildVoiceStates,
  ],
});

// ----------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ -----------------
const SECRET_ROLE_NAME = "room";                        // Role ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á
const SECRET_VOICE_CHANNEL_ID = "1414694646633861173";  // ID ‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏ö (Voice Channel)

const TARGET_USERS = ["365479916965199876", "576009303425548288"];
const TARGET_TEXT_CHANNEL_ID = process.env.TARGET_TEXT_CHANNEL_ID;
const TIMEOUT_MS = 8000;
// -------------------------------------------

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á role
async function getOrCreateRole(guild) {
  let role = guild.roles.cache.find(r => r.name === SECRET_ROLE_NAME);
  if (!role) {
    try {
      role = await guild.roles.create({
        name: SECRET_ROLE_NAME,
        color: "Green",
        reason: "Role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏ö",
      });
      console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á role ${SECRET_ROLE_NAME} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);
    } catch (err) {
      console.error("‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
    }
  }
  return role;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
async function askQuestion(channel, userId, questionText, expectedAnswers, timeout = TIMEOUT_MS) {
  const questionMsg = await channel.send(`<@${userId}> ${questionText}`);
  let collectedMessage;

  return new Promise((resolve) => {
    const collector = channel.createMessageCollector({
      filter: (msg) => msg.author.id === userId,
      time: timeout,
      max: 1,
    });

    collector.on("collect", (msg) => {
      collectedMessage = msg;
      const answer = msg.content.trim().toLowerCase();

      const matched = expectedAnswers.find((exp) => answer.includes(exp.toLowerCase()));
      resolve({ result: !!matched, matched, botMsg: questionMsg, userMsg: collectedMessage });
    });

    collector.on("end", (collected) => {
      if (collected.size === 0) {
        resolve({ result: false, matched: null, botMsg: questionMsg, userMsg: null });
      }
    });
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
function deleteMessagesLater(messages, delay = 5000) {
  setTimeout(() => {
    messages.forEach((msg) => msg?.delete().catch(() => {}));
  }, delay);
}

// ----------------- Ready -----------------
client.once("ready", () => {
  console.log(`‚úÖ Logged in as ${client.user.tag}`);
});

// ----------------- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á !room ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠ role -----------------
client.on("messageCreate", async (message) => {
  if (message.author.bot) return;

  if (message.content.toLowerCase() === "!room") {
    const role = await getOrCreateRole(message.guild);
    if (!role) return message.reply("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡πÑ‡∏î‡πâ");

    let botReply;
    try {
      await message.member.roles.add(role);
      botReply = await message.reply(`‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö role \`${SECRET_ROLE_NAME}\` ‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`);
    } catch (err) {
      console.error(err);
      botReply = await message.reply("‚ö†Ô∏è ‡∏ö‡∏≠‡∏ó‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏û‡∏¥‡πà‡∏° role ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì");
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏ó‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    deleteMessagesLater([message, botReply]);
  }
});

// ----------------- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö VoiceStateUpdate -----------------
client.on(Events.VoiceStateUpdate, async (oldState, newState) => {
  const member = newState.member || oldState.member;
  const role = member.guild.roles.cache.find(r => r.name === SECRET_ROLE_NAME);

  // ---------- [‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏ö room] ----------
  if (newState.channelId === SECRET_VOICE_CHANNEL_ID) {
    if (!role || !member.roles.cache.has(role.id)) {
      try {
        await newState.disconnect();
        const dmMsg = await member.send(`‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ role \`${SECRET_ROLE_NAME}\` ‡πÄ‡∏•‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ`);
        // ‡∏•‡∏ö DM ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏á, ‡πÅ‡∏ï‡πà DM ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏ó
      } catch (err) {
        console.error("‡πÄ‡∏ï‡∏∞‡∏≠‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      }
    }
  }

  if (oldState.channelId === SECRET_VOICE_CHANNEL_ID && newState.channelId !== SECRET_VOICE_CHANNEL_ID) {
    if (role && member.roles.cache.has(role.id)) {
      try {
        await member.roles.remove(role);
        await member.send(`üö™ ‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß Role \`${SECRET_ROLE_NAME}\` ‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏≠‡∏≠‡∏Å`);
      } catch (err) {
        console.error("‡∏ñ‡∏≠‡∏î role ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
      }
    }
  }

  // ---------- [‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ TARGET_USERS] ----------
  if (!oldState.channel && newState.channel) {
    const userId = member.user.id;
    if (TARGET_USERS.includes(userId)) {
      try {
        const textChannel = newState.guild.channels.cache.get(TARGET_TEXT_CHANNEL_ID);
        if (!textChannel || !textChannel.isTextBased()) return;

        // ‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å
        const { result: ok1, matched: ans1, botMsg: q1Bot, userMsg: q1User } =
          await askQuestion(textChannel, userId, "‡πÄ‡∏•‡πà‡∏ô talerunner ‡∏Å‡∏±‡∏ô‡∏°‡∏±‡πâ‡∏¢", ["‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô", "‡∏£‡∏±‡∏Å‡∏ô‡∏∞ Corgi"]);

        if (!ok1) {
          await newState.disconnect();
          const failMsg = await textChannel.send(`‚ùå <@${userId}> ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏∞‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î/‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö`);
          deleteMessagesLater([q1Bot, q1User, failMsg]);
          return;
        }

        if (ans1.toLowerCase() === "‡∏£‡∏±‡∏Å‡∏ô‡∏∞ corgi") {
          const successMsg = await textChannel.send(`<@${userId}> ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß!`);
          deleteMessagesLater([q1Bot, q1User, successMsg]);
          return;
        }

        // ‚ùì ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≠‡∏ö "‡πÑ‡∏°‡πà‡πÄ‡∏•‡πà‡∏ô" ‚Üí ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        const { result: ok2, botMsg: q2Bot, userMsg: q2User } =
          await askQuestion(textChannel, userId, "‡∏Å‡∏π‡∏£‡∏π‡πâ‡∏ô‡∏∞‡∏ß‡πà‡∏≤‡∏°‡∏∂‡∏á‡πÄ‡∏•‡πà‡∏ô", ["‡∏£‡∏±‡∏Å‡∏ô‡∏∞ Corgi"]);

        if (!ok2) {
          await newState.disconnect();
          const failMsg = await textChannel.send(`‚ùå <@${userId}> ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÇ‡∏î‡∏ô‡πÄ‡∏ï‡∏∞‡∏ö‡∏≠‡∏Å‡∏£‡∏±‡∏Å‡∏ô‡∏∞ Corgi ‡∏Å‡πà‡∏≠‡∏ô`);
          deleteMessagesLater([q1Bot, q1User, q2Bot, q2User, failMsg]);
          return;
        }

        const successMsg = await textChannel.send(`<@${userId}> ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß!`);
        deleteMessagesLater([q1Bot, q1User, q2Bot, q2User, successMsg]);

      } catch (err) {
        console.error("‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err);
        await newState.disconnect();
      }
    }
  }
});

client.login(process.env.DISCORD_TOKEN);
